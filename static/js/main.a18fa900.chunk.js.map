{"version":3,"sources":["Components/Chatbody/chatHeader.js","logic/socket.js","Components/Chatbody/messageField.js","Components/Input.js","Components/Chatbody/chatBottom.js","Components/ChatBody.js","Components/AsideChats.js","Components/chatUsersPanel.js","Components/Chat.js","Components/Auth.js","App.js","serviceWorker.js","index.js"],"names":["ChatHeader","event","navigator","clipboard","writeText","currentTarget","getAttribute","Fragment","Row","className","Col","xs","lg","this","props","currentChat","chatname","data-channelid","chatid","onClick","copyToClipboard","Badge","variant","React","Component","socket","io","process","OwnSocket","username","password","emit","setCredentials","on","data","isLoginResponce","type","userid","id","alert","newId","channelid","addChannel","forEach","el","channelId","channelName","addMessage","from","isMe","message","console","log","datetime","Date","toString","updateActiveUsersList","updateActivityStateInPanel","MessageField","bind","scrollToBottom","state","messageList","messageField","createRef","chatId","messageposLg","span","offset","messageposDefault","time","getHours","getMinutes","shortDateTime","getDate","getMonth","getFullYear","setState","prev","key","Toast","style","minWidth","Header","title","Body","current","scrollTo","scrollHeight","receiveMessage","emitLoadMessages","loadMessagesListener","ref","md","CustomInput","inputHandler","keyPressed","sendHandler","inputField","persist","target","value","keyCode","preventDefault","length","enterHandler","trim","InputGroup","FormControl","placeholder","inputPlaceHolder","onChange","onKeyDown","Append","Text","buttonName","BottomChat","onEnterInputHandler","emitSendMessage","ChatBody","incomingMessage","chatBody","AsideChat","clickOnChannel","channelList","emitAddNewChannel","emitConnectToChannel","channelData","data-channelname","changeChat","forceNoSuchChannelAlert","newChannelListener","loadChannelsListener","emitReadyToLoadChannelsState","Accordion","Card","Toggle","as","eventKey","Collapse","createNewChannel","connectToChannel","UsersPanel","updateUsersList","drawUserList","userList","res","push","isActive","usersList","activeUsers","map","loadActiveUsers","usersPanelListener","needUpdateListener","updateActiveUsers","renderList","Chat","chooseChatChannel","Container","fluid","sm","credentials","AuthForm","login","register","userName","registerUser","loginUser","authListener","Form","Group","controlId","Label","Control","data-inputtype","Button","App","isLoggedIn","cred","content","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a18fa900.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Badge, Col, Row } from \"react-bootstrap\";\r\n\r\nexport default class ChatHeader extends React.Component {\r\n  copyToClipboard(event) {\r\n    // ligoud\r\n    navigator.clipboard.writeText(\r\n      event.currentTarget.getAttribute(\"data-channelid\")\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Row className=\"channelInfo\">\r\n          <Col xs={12}>\r\n            <Row>\r\n              <Col lg={9} xs={7}>\r\n                <div>\r\n                  <h4>\r\n                    <span>{this.props.currentChat.chatname}</span>\r\n                  </h4>\r\n                </div>\r\n              </Col>\r\n              <Col lg={3} xs={5}>\r\n                <div\r\n                  className=\"link\"\r\n                  data-channelid={this.props.currentChat.chatid}\r\n                  onClick={this.copyToClipboard}\r\n                >\r\n                  <h4>\r\n                    <Badge variant=\"secondary\">Copy Link</Badge>\r\n                  </h4>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import io from \"socket.io-client\";\r\nvar socket = io(process.env.REACT_APP_SERVER_URI);\r\n// *  singleton like. (to prevent multiconnections to server from the components)\r\nexport default class OwnSocket {\r\n  //\r\n  //Auth control\r\n  //\r\n  //register user\r\n  static registerUser(username, password) {\r\n    socket.emit(\"register\", {\r\n      username: username,\r\n      password: password,\r\n    });\r\n  }\r\n  //login user\r\n  static loginUser(username, password) {\r\n    socket.emit(\"login\", {\r\n      username: username,\r\n      password: password,\r\n    });\r\n  }\r\n  //receive resultat of auth\r\n  static authListener(setCredentials) {\r\n    socket.on(\"authorize\", (data) => {\r\n      // let { username, userid } = { ...data }\r\n\r\n      let isLoginResponce = data.type === \"login\" ? true : false;\r\n      // userid is actual id for logged in user\r\n      if (isLoginResponce && data.userid) {\r\n        delete data.type;\r\n        socket.id = data.userid;\r\n        setCredentials(data);\r\n      }\r\n      //user failed log in\r\n      else if (isLoginResponce) {\r\n        alert(\"Wrong credentials. Try again.\");\r\n      }\r\n      //userid is actual id for new user\r\n      else if (data.userid) {\r\n        delete data.type;\r\n        socket.id = data.userid;\r\n        setCredentials(data);\r\n      }\r\n      //user failed register due to existing account\r\n      else {\r\n        alert(\"account already exist\");\r\n      }\r\n    });\r\n  }\r\n  static getSocketId() {\r\n    return socket.id;\r\n  }\r\n  static setSocketId(newId) {\r\n    socket.id = newId;\r\n  }\r\n  //\r\n  //channels control\r\n  //\r\n  //no such channel\r\n  static forceNoSuchChannelAlert() {\r\n    socket.on(\"nosuchchannel\", (data) => {\r\n      alert(\"No such channel: \" + data.channelid);\r\n    });\r\n  }\r\n  //trigger whenever new chat is added\r\n  static newChannelListener(addChannel) {\r\n    socket.on(\"newChannel\", (data) => {\r\n      addChannel(data);\r\n    });\r\n  }\r\n  //loads all available chat channels.\r\n  static loadChannelsListener(addChannel) {\r\n    socket.on(\"loadChannels\", (data) => {\r\n      data.forEach((el) => {\r\n        addChannel(el);\r\n      });\r\n    });\r\n  }\r\n  //trying to connect to new chat channel\r\n  static emitConnectToChannel(channelId) {\r\n    socket.emit(\"connectToChannel\", { channelid: channelId });\r\n  }\r\n  //emits adding new channel\r\n  static emitAddNewChannel(channelName) {\r\n    socket.emit(\"addChannel\", { channelName: channelName });\r\n  }\r\n  //emits signal that client ready to recevie channel list\r\n  static emitReadyToLoadChannelsState() {\r\n    socket.emit(\"readyToLoadChannels\");\r\n  }\r\n  //\r\n  //messages control\r\n  //\r\n  static receiveMessage(addMessage) {\r\n    socket.on(\"broadcastMessage\", (data) => {\r\n      if (socket.id === data.from.userid) data.isMe = true;\r\n      addMessage(data);\r\n    });\r\n  }\r\n  static emitLoadMessages(channelid) {\r\n    socket.emit(\"load messages\", { channelid: channelid });\r\n  }\r\n  static loadMessagesListener(addMessage) {\r\n    socket.on(\"load messages\", (data) => {\r\n      // console.log(data);\r\n      data.forEach((el) => {\r\n        if (socket.id === el.from.userid) el.isMe = true;\r\n\r\n        addMessage(el);\r\n      });\r\n    });\r\n  }\r\n  static emitSendMessage(channelId, message) {\r\n    console.log(channelId, socket.id);\r\n    socket.emit(\"message\", {\r\n      channelid: channelId,\r\n      message: message,\r\n      datetime: new Date().toString(),\r\n    });\r\n  }\r\n  //\r\n  // active users panel control\r\n  //\r\n  //signal to server that client ready to load activeusers panel\r\n  static loadActiveUsers(channelid) {\r\n    //send signal instantly\r\n    socket.emit(\"getConnectedUsers\", { channelid: channelid });\r\n    //waits for signal from server to full update userlist\r\n    socket.on(\"fullUpdatePanel\", () => {\r\n      socket.emit(\"getConnectedUsers\", { channelid: channelid });\r\n    });\r\n  }\r\n  //receive all users panel\r\n  static usersPanelListener(updateActiveUsersList) {\r\n    socket.on(\"loadUsersOnPanel\", (data) => {\r\n      // console.log(data);\r\n      updateActiveUsersList(data);\r\n    });\r\n  }\r\n  //waits for signal from server to update userlist. (without db acces on server)\r\n  static needUpdateListener(channelid) {\r\n    socket.on(\"updatePanel\", () => {\r\n      console.log(\"forced to update panel\");\r\n      socket.emit(\"updateActiveUsers\", { channelid: channelid });\r\n    });\r\n  }\r\n\r\n  // receives ONLY active users to update info on panel\r\n  static updateActiveUsers(updateActivityStateInPanel) {\r\n    socket.on(\"activeUsers\", (data) => {\r\n      updateActivityStateInPanel(data);\r\n    });\r\n  }\r\n  //\r\n  //\r\n  //\r\n}\r\n","import React from \"react\";\r\nimport { Col, Row, Toast } from \"react-bootstrap\";\r\nimport OwnSocket from \"../../logic/socket\";\r\n\r\nexport default class MessageField extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //\r\n    this.addMessage = this.addMessage.bind(this);\r\n    this.scrollToBottom = this.scrollToBottom.bind(this);\r\n    //\r\n    this.state = {\r\n      messageList: [],\r\n    };\r\n    //\r\n    this.messageField = React.createRef();\r\n  }\r\n  //message is object {channelId,from,datetime,message}\r\n  addMessage(message) {\r\n    //add message card only if proper channel selected\r\n    if (this.props.chatId == message.channelid) {\r\n      //offset  message\r\n      let messageposLg = { span: 6, offset: 0 };\r\n      let messageposDefault = { span: 10, offset: 0 };\r\n      //if message from me\r\n      if (message.isMe) {\r\n        messageposLg.offset = 6;\r\n        messageposDefault.offset = 2;\r\n      }\r\n      let datetime = new Date(message.datetime);\r\n      let time = `${datetime.getHours()}:${datetime.getMinutes()}`;\r\n      let shortDateTime =\r\n        time +\r\n        `\\t ${datetime.getDate()}.${datetime.getMonth()}.${datetime.getFullYear()}`;\r\n      this.setState((prev) => ({\r\n        messageList: [\r\n          ...prev.messageList,\r\n          <Row key={message.datetime + message.message} className=\"my-2\">\r\n            <Col\r\n              lg={messageposLg}\r\n              xs={messageposDefault}\r\n              className=\"messageRow w-100 d-flex justify-content-center\"\r\n            >\r\n              <Toast style={{ minWidth: \"250px\" }}>\r\n                <Toast.Header title={message.from.username}>\r\n                  <strong className=\"mr-auto\">{message.from.username}</strong>\r\n                  <small title={shortDateTime}>{time}</small>\r\n                </Toast.Header>\r\n                <Toast.Body>{message.message}</Toast.Body>\r\n              </Toast>\r\n            </Col>\r\n          </Row>,\r\n        ],\r\n      }));\r\n    }\r\n  }\r\n\r\n  scrollToBottom() {\r\n    this.messageField.current.scrollTo(\r\n      0,\r\n      this.messageField.current.scrollHeight\r\n    );\r\n  }\r\n  componentDidMount() {\r\n    OwnSocket.receiveMessage(this.addMessage);\r\n    OwnSocket.emitLoadMessages(this.props.chatId);\r\n    OwnSocket.loadMessagesListener(this.addMessage);\r\n    //scroll messagefield\r\n    this.scrollToBottom();\r\n  }\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Row className=\"chatField hideScrollBar py-5\" ref={this.messageField}>\r\n          <Col md={12}>{this.state.messageList}</Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Form, InputGroup, FormControl } from \"react-bootstrap\";\r\nimport \"../scss/customInput.scss\";\r\n\r\nexport default class CustomInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //context binds\r\n    this.inputHandler = this.inputHandler.bind(this);\r\n    this.keyPressed = this.keyPressed.bind(this);\r\n    this.sendHandler = this.sendHandler.bind(this);\r\n    //\r\n    this.state = {\r\n      message: \"\",\r\n    };\r\n    this.inputField = React.createRef();\r\n  }\r\n  //\r\n  inputHandler(event) {\r\n    event.persist();\r\n    this.setState({ message: event.target.value });\r\n  }\r\n  //\r\n  keyPressed(event) {\r\n    //Enter pressed\r\n    if (event.keyCode == 13) {\r\n      event.preventDefault();\r\n      if (this.state.message.length > 0) {\r\n        this.props.enterHandler(this.state.message.trim());\r\n        event.target.value = \"\";\r\n        this.setState({ message: \"\" }); //update state\r\n      }\r\n    }\r\n  }\r\n  //\r\n  sendHandler() {\r\n    if (this.state.message.length > 0) {\r\n      this.inputField.current.value = \"\"; // clean inputfield\r\n      this.props.enterHandler(this.state.message); //send its value to the server\r\n      this.setState({ message: \"\" }); //update state\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <InputGroup className=\"mb-2 py-2\">\r\n          <FormControl\r\n            ref={this.inputField}\r\n            className=\"formControlMessage\"\r\n            type=\"text\"\r\n            placeholder={this.props.inputPlaceHolder}\r\n            onChange={this.inputHandler}\r\n            onKeyDown={this.keyPressed}\r\n            value={this.state.message}\r\n          />\r\n\r\n          <InputGroup.Append\r\n            className=\"sendMessageButton\"\r\n            onClick={this.sendHandler}\r\n          >\r\n            <InputGroup.Text>{this.props.buttonName}</InputGroup.Text>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport OwnSocket from \"../../logic/socket\";\r\nimport CustomInput from \"../Input\";\r\n\r\nexport default class BottomChat extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onEnterInputHandler = this.onEnterInputHandler.bind(this);\r\n  }\r\n  onEnterInputHandler(message) {\r\n    OwnSocket.emitSendMessage(this.props.chatId, message);\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Row className=\"messageField\">\r\n          <Col md={12} className=\"px-0\">\r\n            <div className=\"messageInputBox\">\r\n              <CustomInput\r\n                inputPlaceHolder=\"Your message\"\r\n                buttonName=\"Send\"\r\n                enterHandler={this.onEnterInputHandler}\r\n              />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n//sass styles\r\nimport \"../scss/chatBody.scss\";\r\n//custom components\r\nimport ChatHeader from \"./Chatbody/chatHeader\";\r\nimport MessageField from \"./Chatbody/messageField\";\r\nimport ChatBottom from \"./Chatbody/chatBottom\";\r\n//\r\nclass ChatBody extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //context binds\r\n    //initial state\r\n    this.state = {\r\n      message: \"\",\r\n      incomingMessage: \"\",\r\n    };\r\n    //store ref to chat body\r\n    this.chatBody = React.createRef();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <ChatHeader currentChat={this.props.currentChat} />\r\n        <MessageField\r\n          chatId={this.props.currentChat.chatid}\r\n          key={this.props.currentChat.chatid}\r\n        />\r\n        <ChatBottom chatId={this.props.currentChat.chatid} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatBody;\r\n","import React from \"react\";\r\n//bootstrap compoments\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\n//sass styles\r\nimport \"../scss/asideChat.scss\";\r\n//my module with socket.io\r\nimport OwnSocket from \"../logic/socket\";\r\n//custom components\r\nimport CustomInput from \"./Input\";\r\n//\r\n\r\nexport default class AsideChat extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //bind context\r\n    this.addChannel = this.addChannel.bind(this);\r\n    this.clickOnChannel = this.clickOnChannel.bind(this);\r\n    //\r\n    this.state = {\r\n      channelList: [],\r\n    };\r\n  }\r\n  createNewChannel(channelName) {\r\n    //\r\n    OwnSocket.emitAddNewChannel(channelName);\r\n  }\r\n  connectToChannel(channelid) {\r\n    OwnSocket.emitConnectToChannel(channelid);\r\n  }\r\n  addChannel(channelData) {\r\n    this.setState((prev) => ({\r\n      channelList: [\r\n        ...prev.channelList,\r\n        <Row\r\n          className=\"chatRoom\"\r\n          data-channelid={channelData.channelId}\r\n          data-channelname={channelData.channelName}\r\n          key={channelData.channelId}\r\n          onClick={this.clickOnChannel}\r\n        >\r\n          <Col md={12}>\r\n            <span>{channelData.channelName}</span>\r\n          </Col>\r\n        </Row>,\r\n      ],\r\n    }));\r\n  }\r\n  clickOnChannel(event) {\r\n    this.props.changeChat(\r\n      event.currentTarget.getAttribute(\"data-channelid\"),\r\n      event.currentTarget.getAttribute(\"data-channelname\")\r\n    );\r\n  }\r\n  componentDidMount() {\r\n    OwnSocket.forceNoSuchChannelAlert();\r\n    OwnSocket.newChannelListener(this.addChannel);\r\n    OwnSocket.loadChannelsListener(this.addChannel);\r\n    OwnSocket.emitReadyToLoadChannelsState();\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"channelWrapper\">\r\n        <Row className=\"createRoom\">\r\n          <Col md={12} className=\"px-0 mb-0\">\r\n            <Accordion>\r\n              <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                  Create chat-channel\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                  <Card.Body>\r\n                    <CustomInput\r\n                      inputPlaceHolder=\"Channel name\"\r\n                      buttonName=\"Create\"\r\n                      enterHandler={this.createNewChannel}\r\n                    />\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"connectToRoom\">\r\n          <Col md={12} className=\"px-0 mb-0\">\r\n            <Accordion>\r\n              <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                  Connect to chat room\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                  <Card.Body>\r\n                    <CustomInput\r\n                      inputPlaceHolder=\"Channel link\"\r\n                      buttonName=\"Connect\"\r\n                      enterHandler={this.connectToChannel}\r\n                    />\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"lineBorder\">\r\n          <Col md={12}></Col>\r\n        </Row>\r\n        {this.state.channelList}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\n//\r\nimport OwnSocket from \"../logic/socket\";\r\n//\r\nimport \"../scss/userPanel.scss\";\r\n\r\nexport default class UsersPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //\r\n    this.updateUsersList = this.updateUsersList.bind(this);\r\n    this.updateActivityStateInPanel = this.updateActivityStateInPanel.bind(\r\n      this\r\n    );\r\n    this.drawUserList = this.drawUserList.bind(this);\r\n    //\r\n    this.state = {\r\n      userList: [],\r\n    };\r\n    //\r\n  }\r\n  drawUserList() {\r\n    let res = [];\r\n    this.state.userList.forEach((el) => {\r\n      res.push(\r\n        <li\r\n          className={`list-group-item list-group-item-${\r\n            el.isActive ? \"secondary\" : \"light\"\r\n          }`}\r\n          key={el.userid}\r\n          title={el.isActive ? \"Now online\" : \"Now inactive\"}\r\n        >\r\n          {el.username}\r\n        </li>\r\n      );\r\n    });\r\n    return res;\r\n  }\r\n  //set whole list of users\r\n  updateUsersList(usersList) {\r\n    this.setState({ userList: usersList });\r\n  }\r\n  //changes active state on list\r\n  updateActivityStateInPanel(activeUsers) {\r\n    let res = [...this.state.userList];\r\n    res = res.map((el) => {\r\n      if (activeUsers[el.userid]) el.isActive = true;\r\n      else el.isActive = false;\r\n      return el;\r\n    });\r\n    // console.log(activeUsers);\r\n    this.setState({ userList: res });\r\n  }\r\n  componentDidMount() {\r\n    OwnSocket.loadActiveUsers(this.props.chatid);\r\n    OwnSocket.usersPanelListener(this.updateUsersList);\r\n    OwnSocket.needUpdateListener(this.props.chatid);\r\n    OwnSocket.updateActiveUsers(this.updateActivityStateInPanel);\r\n  }\r\n  render() {\r\n    let renderList = this.drawUserList(this.state.userList);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Row>\r\n          <Col xs={12} className=\"panelHeader\">\r\n            <span>\r\n              <h4>Users on channel</h4>\r\n            </span>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"usersPanel\">\r\n          <Col xs={12}>\r\n            <ul className=\"list-group \">{renderList}</ul>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"streamPanel\">\r\n          <Col xs={12}></Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n//\r\nimport \"../scss/app.scss\";\r\n//bootstrap components\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n//\r\nimport ChatBody from \"./ChatBody\";\r\nimport AsideChat from \"./AsideChats\";\r\nimport UsersPanel from \"./chatUsersPanel\";\r\n//\r\nexport default class Chat extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //\r\n    this.chooseChatChannel = this.chooseChatChannel.bind(this);\r\n    //\r\n    this.state = {\r\n      currentChat: { chatid: \"generalchatid\", chatname: \"General Chat\" },\r\n    };\r\n  }\r\n  //chnages current chat global state\r\n  chooseChatChannel(channelId, channelName) {\r\n    // console.log(\"changing chat\");\r\n    this.setState({\r\n      currentChat: { chatid: channelId, chatname: channelName },\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <Container fluid className=\"h-100\">\r\n        <Row className=\"main\">\r\n          <Col sm={3} className=\"aside hideScrollBar\">\r\n            <AsideChat\r\n              credentials={this.props.credentials}\r\n              changeChat={this.chooseChatChannel}\r\n            />\r\n          </Col>\r\n          <Col sm={6} className=\"middlePanel mx-1\">\r\n            <ChatBody\r\n              credentials={this.props.credentials}\r\n              currentChat={this.state.currentChat}\r\n            />\r\n          </Col>\r\n          <Col sm={2}>\r\n            <UsersPanel\r\n              chatid={this.state.currentChat.chatid}\r\n              key={this.state.currentChat.chatid}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\r\n//sass styles\r\nimport \"../scss/auth.scss\";\r\n//my module with socket.io\r\nimport OwnSocket from \"../logic/socket\";\r\n\r\nexport default class AuthForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //bind context\r\n    this.inputHandler = this.inputHandler.bind(this);\r\n    this.login = this.login.bind(this);\r\n    this.register = this.register.bind(this);\r\n    //\r\n    this.state = {\r\n      userName: \"\",\r\n      password: \"\",\r\n    };\r\n  }\r\n  inputHandler(event) {\r\n    event.persist();\r\n    //set state\r\n    this.setState({\r\n      [event.target.getAttribute(\"data-inputtype\")]: event.target.value,\r\n    });\r\n  }\r\n  //claim credentials and send to server\r\n  register() {\r\n    if (this.state.userName && this.state.password)\r\n      OwnSocket.registerUser(this.state.userName, this.state.password);\r\n    else console.log(\"not authed\");\r\n  }\r\n  login() {\r\n    if (this.state.userName && this.state.password)\r\n      OwnSocket.loginUser(this.state.userName, this.state.password);\r\n    else console.log(\"not authed\");\r\n  }\r\n  componentDidMount() {\r\n    OwnSocket.authListener(this.props.setCredentials);\r\n  }\r\n  render() {\r\n    return (\r\n      <Container fluid className=\"h-100\">\r\n        <Row className=\"h-50 pt-5\">\r\n          <Col md={{ span: 8, offset: 2 }} id=\"authCard\">\r\n            <Row>\r\n              <Col md={12} className=\"d-flex justify-content-center\">\r\n                <h3>Авторизуйтесь</h3>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"pt-5 h-50\">\r\n              <Col md={{ span: 8, offset: 2 }}>\r\n                <Form className=\"authForm\">\r\n                  <Form.Group controlId=\"username\">\r\n                    <Form.Label>Your Username</Form.Label>\r\n                    <Form.Control\r\n                      data-inputtype=\"userName\"\r\n                      type=\"text\"\r\n                      placeholder=\"User123\"\r\n                      onChange={this.inputHandler}\r\n                      value={this.state.userName}\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"password\">\r\n                    <Form.Label>Your Password</Form.Label>\r\n                    <Form.Control\r\n                      data-inputtype=\"password\"\r\n                      type=\"password\"\r\n                      placeholder=\"UnexpectedlyHardPassword\"\r\n                      onChange={this.inputHandler}\r\n                      value={this.state.password}\r\n                    />\r\n                  </Form.Group>\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"buttonRow mt-5 pt-5\">\r\n              <Col md={{ span: 3, offset: 1 }} lg={{ span: 2, offset: 1 }}>\r\n                <Button\r\n                  variant=\"outline-secondary\"\r\n                  className=\"w-100 mw-100\"\r\n                  onClick={this.login}\r\n                >\r\n                  Log in\r\n                </Button>\r\n              </Col>\r\n              <Col\r\n                md={{ span: 3, offset: 4 }}\r\n                lg={{ span: 2, offset: 6 }}\r\n                onClick={this.register}\r\n              >\r\n                <Button variant=\"outline-secondary\" className=\"w-100 mw-100\">\r\n                  Register\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\n\n//custom components\nimport Chat from \"./Components/Chat\";\nimport Auth from \"./Components/Auth\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    //\n    this.setCredentials = this.setCredentials.bind(this);\n    //\n    this.state = {\n      isLoggedIn: false,\n      credentials: {},\n    };\n  }\n  //set credentials to state. optional: add localstorage here\n  setCredentials(cred) {\n    this.setState({ isLoggedIn: true, credentials: cred });\n  }\n  render() {\n    let content = \"\";\n    if (this.state.isLoggedIn)\n      content = <Chat credentials={this.state.credentials} />;\n    else content = <Auth setCredentials={this.setCredentials} />;\n    return <React.Fragment>{content}</React.Fragment>;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n//\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <App />,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}